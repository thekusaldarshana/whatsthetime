---
import { DateTime } from 'luxon';
---

<div class="p-6 max-w-2xl mx-auto bg-glass backdrop-blur-md rounded-xl shadow-glass border border-white/10 transition-all duration-500">
  <h2 class="text-2xl font-semibold mb-4 text-center text-gray-800 dark:text-gray-200">üïì Time Converter</h2>

  <!-- üìÖ Now Card -->
<div id="nowCard" class="relative mb-5 p-4 rounded-xl text-white dark:text-white text-center transition duration-300">
  <div class="text-hero relative z-10 text-lg font-medium" id="nowText">Loading current time...</div>
  <div class="absolute inset-0 bg-black/10 dark:bg-black/30 backdrop-blur-sm z-0 rounded-xl"></div>
</div>


  <!-- Backdrop Overlay -->
<div id="clockOverlay" class="fixed inset-0 bg-black/40 backdrop-blur-sm z-40 hidden"></div>

  <div class="mb-4">
    <label class="block text-sm font-medium text-gray-800 dark:text-gray-200 mb-1">From:</label>
    <select name="fromZone" class="w-full p-2 rounded-md border border-yellow-300 dark:border-gray-600 
         bg-white dark:bg-gray-900 text-yellow-900 dark:text-gray-100 
         focus:outline-none focus:ring-2 focus:ring-yellow-300 dark:focus:ring-green-500 
         focus:border-yellow-300 dark:focus:border-green-500 
         transition duration-200 appearance-none relative z-10" id="fromZone">
      <option>Loading zones...</option>
    </select>
  </div>

  <div class="mb-4">
    <label class="block text-sm font-medium text-gray-800 dark:text-gray-200 mb-1">To:</label>
    <select name="toZone" class="w-full p-2 rounded-md border border-yellow-300 dark:border-gray-600 
         bg-white dark:bg-gray-900 text-yellow-900 dark:text-gray-100 
         focus:outline-none focus:ring-2 focus:ring-yellow-300 dark:focus:ring-green-500 
         focus:border-yellow-300 dark:focus:border-green-500 
         transition duration-200 appearance-none relative z-10" id="toZone">
      <option>Loading zones...</option>
    </select>
  </div>

  <div class="mb-4 relative">
    <label class="block text-sm font-medium text-gray-800 dark:text-gray-200 mb-1">Custom Time (12h):</label><div class="flex gap-2 items-center">
    <div class="flex-1 w-full p-2 rounded-md border border-yellow-300 dark:border-gray-600 bg-sunny-50 text-yellow-900 dark:bg-gray-800 dark:text-gray-100 
         focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 
         transition duration-200 appearance-none relative z-10 cursor-pointer" id="clockInput">
      <span id="displayTime">Select Time</span>
    </div>

    <!-- Reset Button -->
    <button
      id="resetTime"
      class="px-3 py-2 bg-yellow-100 dark:bg-white/10 text-yellow-900 dark:text-white rounded-lg shadow-md 
      hover:scale-105 hover:ring-2 hover:ring-yellow-300 transition"
    >
      ‚ü≥
    </button>

    <!-- Clock Popup -->
    <div id="clockPopup" class="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 
         w-[90vw] max-w-md bg-white dark:bg-gray-900 border border-yellow-300 dark:border-gray-600 
         rounded-2xl p-6 shadow-2xl z-50 hidden backdrop-blur-md transition-all duration-300">

  <div class="flex justify-center mb-2 text-yellow-800 dark:text-gray-200">Select Time</div>

 <!-- Clock face with numbers -->
  <div class="relative w-56 h-56 mx-auto flex items-center justify-center rounded-full bg-yellow-100 dark:bg-gray-800">
  <div id="clockNumbers" class="absolute inset-0"></div>
  <div id="clockFace" class="absolute inset-0 flex items-center justify-center">
    <div id="clockHour" class="absolute w-1 h-16 bg-yellow-600 dark:bg-green-600 origin-[center_bottom] bottom-1/2 transform rotate-0 transition duration-300 rounded"></div>
<div id="clockMinute" class="absolute w-0.5 h-24 bg-yellow-300 dark:bg-green-300 origin-[center_bottom] bottom-1/2 transform rotate-0 transition duration-300 rounded"></div>

  </div>
  <div id="centerDot" class="w-3 h-3 bg-yellow-600 dark:bg-green-600 rounded-full z-10"></div>


</div>

      <div class="flex justify-between items-center mt-4 px-4">
        <button id="toggleAMPM" class="bg-yellow-100 dark:bg-white/10 text-yellow-900 dark:text-white px-4 py-2 rounded-lg shadow-md hover:scale-105 hover:ring-2 hover:ring-glow transition">AM</button>
        <button id="setTime" class="bg-yellow-100 dark:bg-white/10 text-yellow-900 dark:text-white px-4 py-2 rounded-lg shadow-md hover:scale-105 hover:ring-2 hover:ring-glow transition">Set</button>
      </div>
    </div>
  </div>

  <div class="mt-4 text-center">
    <p class="text-2xl mb-4 text-center text-gray-800 dark:text-gray-200">
      ‚è± <strong id="convertedTime">[Choose time zones]</strong>
    </p>
  </div>
</div>

<script type="module">
  import { DateTime } from 'https://cdn.skypack.dev/luxon';

  const fromEl = document.getElementById('fromZone');
  const toEl = document.getElementById('toZone');
  const outputEl = document.getElementById('convertedTime');
  const clockInput = document.getElementById('clockInput');
  const clockPopup = document.getElementById('clockPopup');
  const displayTime = document.getElementById('displayTime');
  const hourHand = document.getElementById('clockHour');
  const minuteHand = document.getElementById('clockMinute');
  const toggleAMPM = document.getElementById('toggleAMPM');
  const setTime = document.getElementById('setTime');

  const resetTime = document.getElementById('resetTime');

  let selectedHour = 12;
  let selectedMinute = 0;
  let isAM = true;

  let customEl = null;

  async function loadZones() {
  const res = await fetch('/zones.json');
  const zones = await res.json();

  [fromEl, toEl].forEach(select => {
    select.innerHTML = '';
    zones.forEach(zone => {
      const opt = document.createElement('option');
      opt.value = zone;
      opt.textContent = zone;
      select.appendChild(opt);
    });
  });

  // üåç Detect user's local zone
  let userZone = 'Asia/Colombo'; // fallback
  try {
    const detected = Intl.DateTimeFormat().resolvedOptions().timeZone;
    if (zones.includes(detected)) {
      userZone = detected;
    }
  } catch (err) {
    console.warn('Time zone detection failed, using fallback.');
  }

  fromEl.value = userZone;

  // ‚è∞ Default "To" zone is GMT (Greenwich Mean Time)
  toEl.value = zones.includes('Etc/GMT') ? 'Etc/GMT' : 'Europe/London';

  convert();
}



  function renderClockNumbers() {
  const container = document.getElementById('clockNumbers');
  for (let i = 1; i <= 12; i++) {
    const angle = i * 30;
    const x = 50 + 42 * Math.cos((angle - 90) * Math.PI / 180);
    const y = 50 + 42 * Math.sin((angle - 90) * Math.PI / 180);

    const num = document.createElement('div');
    num.className = 'absolute text-sm text-yellow-800 dark:text-gray-200';
    num.style.left = `${x}%`;
    num.style.top = `${y}%`;
    num.style.transform = 'translate(-50%, -50%)';
    num.textContent = i;
    container.appendChild(num);
  }
}

renderClockNumbers();

const nowText = document.getElementById('nowText');

function getEmoji(hour) {
  if (hour >= 5 && hour < 11) return 'üå§Ô∏è';
  if (hour >= 11 && hour < 17) return '‚òÄÔ∏è';
  if (hour >= 17 && hour < 20) return 'üåá';
  return 'üåô';
}

function getWish(hour) {
  if (hour >= 5 && hour < 11) return "It's a fresh morning to you! Have a nice day...";
  if (hour >= 11 && hour < 17) return "Good afternoon! The best is yet to come...";
  if (hour >= 17 && hour < 20) return "Good evening. What's going on?";
  return "Good night! Hope you had a nice day!";
}

function getTimePhase(hour) {
  if (hour >= 5 && hour < 11) return 'morning';
  if (hour >= 11 && hour < 17) return 'afternoon';
  if (hour >= 17 && hour < 20) return 'evening';
  return 'night';
}

function updateNowCard(userZone = Intl.DateTimeFormat().resolvedOptions().timeZone || 'Asia/Colombo') {
  const now = DateTime.local().setZone(userZone);
  const weekday = now.toFormat('cccc');
  const date = now.toFormat('MMMM d');
  const time = now.toFormat('hh:mm a');
  const emoji = getEmoji(now.hour);
  const wish = getWish(now.hour);
  const phase = getTimePhase(now.hour);

  const nowCard = document.getElementById('nowCard');
  const nowText = document.getElementById('nowText');

  // Set image as background
  nowCard.style.backgroundImage = `url('/assets/${phase}.jpg')`;
  nowCard.style.backgroundSize = 'cover';
  nowCard.style.backgroundPosition = 'center';
  nowCard.style.backgroundRepeat = 'no-repeat';

  nowText.innerHTML = `
    üìÖ ${weekday}, ${date} ‚Äî ${time} ‚Äî ${emoji}
    <br />
    <span class="block italic text-sm mt-1 text-gray-200 dark:text-gray-200">${wish}</span>
  `;
}

// Update immediately and then every 30 seconds
updateNowCard();
setInterval(updateNowCard, 30000);

setTimeout(() => {
  fetch('https://ipapi.co/json/')
    .then(res => res.json())
    .then(loc => {
      const city = loc.city;
      const country = loc.country_name;
      const lat = loc.latitude;
      const lon = loc.longitude;

      // Then: fetch weather
      fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`)
        .then(res => res.json())
        .then(weather => {
          const temp = weather.current_weather.temperature;
          const code = weather.current_weather.weathercode; // map this to emoji
          document.getElementById('nowText').innerHTML += `<br /><span class="text-sm italic">üìç ${city}, ${country} ‚Äî ${temp}¬∞C</span>`;
        });
    });
}, 1000); // delay by 1 second after everything else



  function updateClockHands() {
    hourHand.style.transform = `rotate(${(selectedHour % 12) * 30}deg)`;
    minuteHand.style.transform = `rotate(${selectedMinute * 6}deg)`;
  }

  function convert() {
    const from = fromEl.value;
    const to = toEl.value;
    const hour = selectedHour % 12 + (isAM ? 0 : 12);
    const base = DateTime.fromObject({ hour, minute: selectedMinute }, { zone: from });
    const target = base.setZone(to);
    outputEl.innerText = target.toFormat('hh:mm a (cccc)');
  }

  clockInput.addEventListener('click', () => {
  const isVisible = !clockPopup.classList.contains('hidden');
  if (isVisible) {
    clockPopup.classList.add('hidden');
    clockOverlay.classList.add('hidden');
  } else {
    clockPopup.classList.remove('hidden');
    clockOverlay.classList.remove('hidden');
  }
});

  clockOverlay.addEventListener('click', () => {
  clockPopup.classList.add('hidden');
  clockOverlay.classList.add('hidden');
});


  toggleAMPM.addEventListener('click', () => {
    isAM = !isAM;
    toggleAMPM.innerText = isAM ? 'AM' : 'PM';
  });

  setTime.addEventListener('click', () => {
    const hour = selectedHour.toString().padStart(2, '0');
    const min = selectedMinute.toString().padStart(2, '0');
    displayTime.innerText = `${hour}:${min} ${isAM ? 'AM' : 'PM'}`;
    clockPopup.classList.add('hidden');
    clockOverlay.classList.add('hidden');
    convert();
  });

  resetTime.addEventListener('click', () => {
  const now = DateTime.local();
  selectedHour = now.hour % 12 || 12;
  selectedMinute = now.minute;
  isAM = now.hour < 12;

  updateClockHands();
  displayTime.innerText = now.toFormat('hh:mm a');
  convert();
});

  document.getElementById('clockFace').addEventListener('click', (e) => {
    const rect = e.currentTarget.getBoundingClientRect();
    const cx = rect.left + rect.width / 2;
    const cy = rect.top + rect.height / 2;
    const dx = e.clientX - cx;
    const dy = e.clientY - cy;
    const angle = Math.atan2(dy, dx) * (180 / Math.PI);
    const distance = Math.sqrt(dx * dx + dy * dy);

    if (distance < 60) {
      selectedHour = Math.round((angle + 360 + 90) % 360 / 30) || 12;
    } else {
      selectedMinute = Math.round((angle + 360 + 90) % 360 / 6);
    }

    updateClockHands();
  });

  setInterval(convert, 1000);
  loadZones();
</script>

<script data-name="BMC-Widget" data-cfasync="false" src="https://cdnjs.buymeacoffee.com/1.0.0/widget.prod.min.js" data-id="thekusaldarshana" data-description="Support me on Buy me a coffee!" data-message="Thank you for Visiting. You can now buy me a Coffee." data-color="#40DCA5" data-position="Right" data-x_margin="18" data-y_margin="18"></script>
